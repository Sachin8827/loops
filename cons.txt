1. What is byte code in java?
ans. Byte Code can be defined as an intermediate code generated by the compiler after the compilation of source code(JAVA Program). This intermediate code makes Java a platform-independent language.

2. What is interpreter?
ans. Java interpreter is a computer program (system software) that implements the JVM. It is responsible for reading and executing the program. It is designed in such a way that it can read the source program and translate the source code instruction by instruction. It converts the high-level program into assembly language (machine language).

3. How does the Java interpreter work?
To convert the byte code into machine code, we deploy the .class file on the Java Virtual Machine (JVM). The JVM converts that code into machine code using the Java interpreter. The JVM uses the interpreter at runtime, after that it execute the code on the host machine.

4.  what are the Features of Interpreter
It converts the source code into machine language, line by line at run time, without changing the sequence.

An interpreter does not generate an intermediate machine code
Each error of every line is displayed one by one
When compared to a compiler, the program execution speed is slower
Less amount of time is spent on analyzing and processing the program

5. What is JDK?
ans. JDK stands for Java Development Kit. It is a software development environment used to develop Java applications and applets. It is a platform-specific software i.e there are separate installers for Windows, Mac, and Unix systems. Java developers can use it on their Windows, macOS, Solaris, and Linux to code and run Java programs. It contains Java Runtime Environment(JRE) and other development tools like an interpreter, compiler, archiver, and a document generator. We can possibly install more than one JDK version on the same computer. 

6. What is JRE?
ans. JRE stands for Java Runtime Environment. It is the implementation of JVM (Java Virtual Machine) and it is specially designed to provide an environment to execute Java programs. It is also platform dependent like JDK. It consists of JVM, Java binaries, and other classes for the smooth execution of the program. It doesn’t contain any development tools like a compiler, debugger, etc. If we only want to execute a program, we just need to install JRE and not JDK, since there is no development or compilation of the code required.

7. Difference between JVM, JRE, and JDK.
JVM: JVM stands for Java Virtual Machine. JVM is used for running Java bytecode.Java applications are called WORA (Write Once Run Anywhere). This means a programmer can develop Java code on one system and can expect it to run on any other Java-enabled system without any adjustment. This is all possible because of JVM.
JRE: JRE stands for Java Runtime Environment. JRE is made up of class libraries.
JDK: JDK stands for Java Development Kit. JDK contains the JRE with compiler, interpreter, debugger, and other tools. It provides features to run as well as develop Java Programs.

8. How a java program runs?
ans. First, the source ‘.java’ file is passed through the compiler, which then encodes the source code into a machine-independent encoding, known as Bytecode. The content of each class contained in the source file is stored in a separate ‘.class’ file.
The class files generated by the compiler are independent of the machine or the OS, which allows them to be run on any system. To run, the main class file (the class that contains the method main) is passed to the JVM and then goes through three main stages before the final machine code is executed. These stages are:
These states do include:

ClassLoader
Bytecode Verifier
Just-In-Time Compiler

Class LOader = The main class is loaded into the memory bypassing its ‘.class’ file to the JVM, through invoking the latter. All the other classes referenced in the program are loaded through the class loader.
A class loader, itself an object, creates a flat namespace of class bodies that are referenced by a string name. The method definition is provided below illustration as follows:

ByteCode verifier = After the bytecode of a class is loaded by the class loader, it has to be inspected by the bytecode verifier, whose job is to check that the instructions don’t perform damaging actions. The following are some of the checks carried out: 

Variables are initialized before they are used.
Method calls match the types of object references.
Rules for accessing private data and methods are not violated.
Local variable accesses fall within the runtime stack.
The run-time stack does not overflow.
If any of the above checks fail, the verifier doesn’t allow the class to be loaded.

Just in time compiler = This is the final stage encountered by the java program, and its job is to convert the loaded bytecode into machine code. When using a JIT compiler, the hardware can execute the native code, as opposed to having the JVM interpret the same sequence of bytecode repeatedly and incurring the penalty of a relatively lengthy translation process. This can lead to performance gains in the execution speed unless methods are executed less frequently.

9. Differnce between JVM and interpreter?
ans . I will find later.

10. Why java is not 100 percent object oriented ?
ans. No! Java is not a "PURE" Object Oriented Language , because it uses primitive data types such as (int,float,char...etc). The developers of java could have made these primitive data types as objects(like String... etc), but the primitive data types such as int float... are more faster than objects! So, in order to achieve faster execution of java program they kept Primitive data type as it is!!

So Java is said to be 98% Object oriented language but not PURE Object Oriented language!!

11. Differnce between compiler and interpreter?
ans Compiler:-
Steps of Programming:

Program Creation.
Analysis of language by the compiler and throws errors in case of any incorrect statement.
In case of no error, the Compiler converts the source code to Machine Code.
Linking of various code files into a runnable program.
Finally runs a Program.

Interpreter:-
Program Creation.
Linking of files or generation of Machine Code is not required by Interpreter.
Execution of source statements one by one.

Compiler:- The compiler saves the Machine Language in form of Machine Code on disks.
Compiled codes run faster than Interpreter.
The compiler generates an output in the form of (.exe).
Any change in the source program after the compilation requires recompiling the entire code.
Errors are displayed in Compiler after Compiling together at the current time.
The compiler can see code upfront which helps in running the code faster because of performing Optimization.

Interpreter;-
The Interpreter does not save the Machine Language.
Interpreted codes run slower than Compiler.
The Interpretation Model is the basic working model of the Interpreter.
The interpreter does not generate any output.
Any change in the source program during the translation does not require retranslation of the entire code.
Errors are displayed in every single line.
The Interpreter works by line working of Code, that’s why Optimization is a little slower compared to Compilers.